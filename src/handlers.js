const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const { enviarParaGrupo } = require('./bot');

// Criando uma inst√¢ncia do cliente
const client = new Client({
    authStrategy: new LocalAuth(),
});

// Vari√°veis para armazenar as informa√ß√µes da corrida
let dadosCliente = { partida: '', chegada: '', pagamento: '', nome: '', telefone: '', confirmado: false };

// Processa cada mensagem recebida
async function processarMensagem(client, message) {
    const texto = message.body.trim();

    // Mensagem inicial
    if (texto.toLowerCase() === 'ol√°' || texto.toLowerCase() === 'bom dia' || texto.toLowerCase() === 'boa tarde') {
        message.reply('Ol√°! Sou o assistente virtual da [Nome da Empresa de T√°xi]. Como posso ajudar?');
        message.reply('Por favor, informe o nome com o qual deseja ser atendido.');
        return;
    }

    // Se o nome ainda n√£o foi coletado
    if (!dadosCliente.nome) {
        dadosCliente.nome = texto;
        message.reply('Perfeito, agora por favor, informe o endere√ßo de partida (ou nome de um local, como "Shopping X").');
    } else if (!dadosCliente.partida) {
        dadosCliente.partida = texto;
        message.reply('Qual √© o endere√ßo de chegada (ou nome de um local)?');
    } else if (!dadosCliente.chegada) {
        dadosCliente.chegada = texto;
        message.reply('Qual ser√° a forma de pagamento? (Ex: dinheiro, cart√£o, PIX)');
    } else if (!dadosCliente.pagamento) {
        dadosCliente.pagamento = texto;
        message.reply('Agora, por favor, informe seu n√∫mero de telefone (com DDD).');
    } else if (!dadosCliente.telefone) {
        dadosCliente.telefone = texto;

        // Criando a mensagem para o cliente confirmar os dados
        const mensagemConfirmacao = `
            **Resumo dos seus dados:**

            üßë‚Äç‚úàÔ∏è *Nome:* ${dadosCliente.nome}
            üìç *Partida:* ${dadosCliente.partida}
            üéØ *Chegada:* ${dadosCliente.chegada}
            üí∞ *Pagamento:* ${dadosCliente.pagamento}
            üìû *Contato:* ${dadosCliente.telefone}

            **Por favor, confirme se os dados est√£o corretos.** Responda com "sim" ou "n√£o".
        `;

        message.reply(mensagemConfirmacao);
    } else if (!dadosCliente.confirmado) {
        // Se o cliente respondeu para confirmar os dados
        if (texto.toLowerCase() === 'sim') {
            dadosCliente.confirmado = true;

            // Criando a mensagem para o grupo de motoristas/admins
            const mensagemDeCorrida = `
                **üöñ Nova Corrida Solicitada! üöñ**

                üßë‚Äç‚úàÔ∏è *Nome:* ${dadosCliente.nome}
                üìç *Partida:* ${dadosCliente.partida}
                üéØ *Chegada:* ${dadosCliente.chegada}
                üí∞ *Pagamento:* ${dadosCliente.pagamento}
                üìû *Contato:* ${dadosCliente.telefone}
            `;

            // Enviar mensagem para o grupo
            await enviarParaGrupo(client, mensagemDeCorrida);

            // Confirmar com o cliente
            message.reply('‚úÖ Sua solicita√ß√£o foi enviada! Um motorista entrar√° em contato em breve.');

            // Resetar os dados para uma nova corrida
            dadosCliente = { partida: '', chegada: '', pagamento: '', nome: '', telefone: '', confirmado: false };
        } else if (texto.toLowerCase() === 'n√£o') {
            // Caso o cliente n√£o confirme, resetar os dados e reiniciar a coleta
            dadosCliente = { partida: '', chegada: '', pagamento: '', nome: '', telefone: '', confirmado: false };
            message.reply('‚ùå Dados n√£o confirmados. Vamos recome√ßar a coleta das informa√ß√µes.');

            message.reply('Por favor, informe o nome com o qual deseja ser atendido.');
        } else {
            // Caso a resposta n√£o seja sim ou n√£o
            message.reply('‚ùå Resposta inv√°lida. Por favor, responda com "sim" ou "n√£o" para confirmar seus dados.');
        }
    }
}

// Listar os grupos onde o bot est√° adicionado
client.on('ready', () => {
    console.log('Cliente WhatsApp pronto!');

    // Listar todos os grupos e seus respectivos IDs
    client.getChats().then(chats => {
        chats.forEach(chat => {
            if (chat.isGroup) {
                console.log(`Nome do grupo: ${chat.name} | ID do grupo: ${chat.id._serialized}`);
            }
        });
    });
});

// Inicializa√ß√£o do QR code para o login
client.on('qr', (qr) => {
    qrcode.generate(qr, { small: true });
});

// Evento que ser√° disparado quando o cliente estiver autenticado
client.on('authenticated', () => {
    console.log('Cliente autenticado com sucesso!');
});

// Evento que ser√° disparado em caso de erro
client.on('auth_failure', (msg) => {
    console.error('Falha na autentica√ß√£o:', msg);
});

// Inicia o cliente
client.initialize();

module.exports = { processarMensagem };
